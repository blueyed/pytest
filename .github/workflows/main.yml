name: main

on:
  push:
    branches:
      - my-master
      - "[0-9]+.[0-9]+.x"
    tags:
      - "*"
  pull_request:
    branches:
      - my-master
      - "[0-9]+.[0-9]+.x"

jobs:
  tests:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        name: [
          "windows-py37 (1)",
        ]

        include:
          - name: "windows-py37 (1)"
            python: "3.7"
            os: windows-latest
            tox_env: "py37"
            script_prefix: "env PYTEST_REORDER_TESTS=0 PYTEST_DEBUG=1"
            pytest_addopts: "--verbosity=2 testing/test_assertrewrite.py::TestEarlyRewriteBailout::test_basic testing/test_collection.py::Test_getinitialnodes::test_pkgfile testing/test_collection.py::test_collect_init_tests testing/python/fixtures.py::TestFixtureManagerParseFactories::test_package_xunit_fixture testing/python/fixtures.py::TestScopeOrdering::test_multiple_packages"

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2000
    - run: git fetch --tags origin
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

    # Caching.
    - name: set PY_CACHE_KEY
      run: echo "PY_CACHE_KEY=$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')" >> $GITHUB_ENV
    - name: Cache .tox
      if: (matrix.tox_env != 'docs')
      uses: actions/cache@v1
      with:
        path: ${{ github.workspace }}/.tox/${{ matrix.tox_env }}
        key: "tox|${{ matrix.tox_env }}|${{ env.PY_CACHE_KEY }}|${{ hashFiles('tox.ini', 'setup.*') }}"
    - name: Cache .tox (docs)
      if: (matrix.tox_env == 'docs')
      uses: actions/cache@v1
      with:
        path: ${{ github.workspace }}/.tox/${{ matrix.tox_env }}
        # Work around tox not rebuilding on changed requirements file (https://github.com/tox-dev/tox/issues/149).
        key: "tox|${{ matrix.tox_env }}|${{ env.PY_CACHE_KEY }}|${{ hashFiles('tox.ini', 'setup.*', 'doc/en/requirements.txt') }}"
    - name: Cache .pre-commit
      if: (matrix.tox_env == 'linting_ci')
      uses: actions/cache@v1
      with:
        path: ~/.cache/pre-commit
        key: pre-commit|${{ env.PY_CACHE_KEY }}|${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Install tox / version information
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: "1"
      run: |
        python -m pip --version
        python -m pip install git+https://github.com/blueyed/tox@master
        python -m pip list

    - name: Setup tox environment
      run: python -m tox --notest -v --durations -e ${{ matrix.tox_env }}

    - name: Test
      env:
        PYTEST_ADDOPTS: "-ra --durations=50 ${{ matrix.pytest_addopts }}"
        COLUMNS: "120"
        # UTF-8 mode for Windows (https://docs.python.org/3/using/windows.html#utf-8-mode).
        PYTHONUTF8: "1"
        TOX_TESTENV_PASSENV: "PYTHONUTF8"
      run: "${{ matrix.script_prefix }} tox -e ${{ matrix.tox_env }}"

    - name: Report coverage
      if: always() && (contains(matrix.tox_env, '-coverage'))
      env:
        CODECOV_TOKEN: d79f3a85-e675-4d75-8f55-3d0e4a99ebe8
      run: "bash .ci/report-coverage.sh -n '${{ matrix.name }}' -F 'GHA,${{ runner.os }}'"

  deploy:
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') && github.repository == 'pytest-dev/pytest'
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2000
    - run: git fetch --tags origin
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.7"
    - name: Install dependencies
      run: |
        python -m pip --version
        python -m pip install wheel setuptools git+https://github.com/blueyed/tox@master
    - name: Build package
      run: |
        python setup.py sdist bdist_wheel
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi_token }}
    - name: Publish GitHub release notes
      env:
        GH_RELEASE_NOTES_TOKEN: ${{ secrets.release_notes }}
      run: |
        sudo apt-get install pandoc
        tox -e publish-gh-release-notes
