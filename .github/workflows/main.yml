# Main jobs.
# Keep the steps in sync with .github/workflows/pull-requests.yml.
name: main

on:
  push:
    branches:
      - my-master
      - "[0-9]+.[0-9]+.x"
    tags:
      - "*"
  pull_request:
    branches:
      - my-master
      - "[0-9]+.[0-9]+.x"

jobs:
  tests:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        name: [
          "ubuntu-py38",
          "ubuntu-py38 (pexpect, integration)",
          "ubuntu-pypy3",

          "macos-py36",

          "windows-py37 (1)",
          "windows-py37 (2)",

          "xdist",

          "linting",
          "docs",
          "doctesting",
          "mypy",
        ]

        include:
          - name: "ubuntu-py38"
            python: "3.8"
            os: ubuntu-latest
            tox_env: "py38-lsof-numpy-oldattrs-twisted-coverage"
          - name: "ubuntu-pypy3"
            python: "pypy3"
            os: ubuntu-latest
            tox_env: "pypy3-coverage"
            pytest_addopts: "-m 'pypy_specific or acceptance_tests'"
          - name: "ubuntu-py38 (pexpect, integration)"
            python: "3.8"
            os: ubuntu-latest
            tox_env: "py38-lsof-pexpect-coverage"
            pytest_addopts: "-m 'uses_pexpect or integration' --run-integration-tests"
            script_prefix: "env -u COLUMNS"

          # Coverage for:
          # - osx
          # - verbosity=1
          - name: "macos-py36"
            python: "3.6"
            os: macos-latest
            tox_env: "py36-nopygments-coverage"
            pytest_addopts: "--verbosity=1"

          - name: "windows-py37 (1)"
            python: "3.7"
            os: windows-latest
            tox_env: "py37-coverage-grouped"
            script_prefix: "env PYTEST_REORDER_TESTS=0"
            # Coverage for:
            # - verbosity=2
            pytest_addopts: "--verbosity=2 --test-group-count 2 --test-group=1"

          - name: "windows-py37 (2)"
            python: "3.7"
            os: windows-latest
            tox_env: "py37-coverage-grouped"
            script_prefix: "env PYTEST_REORDER_TESTS=0"
            # Coverage for:
            # - verbosity=2
            pytest_addopts: "--verbosity=2 --test-group-count 2 --test-group=2"

          - name: "xdist"
            python: "3.8"
            os: ubuntu-latest
            tox_env: "py38-xdist-coverage"
            pytest_addopts: "-m 'xdist_specific or acceptance_tests' -n 0"

          - name: "linting"
            python: "3.8"
            os: ubuntu-latest
            tox_env: "linting_ci"
          - name: "docs"
            python: "3.8"
            os: ubuntu-latest
            tox_env: "docs"
          - name: "doctesting"
            python: "3.8"
            os: ubuntu-latest
            tox_env: "doctesting-coverage"
          - name: "mypy"
            python: "3.8"
            os: ubuntu-latest
            tox_env: "mypy_ci"

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    # Caching.
    - name: set PY_CACHE_KEY
      run: echo "::set-env name=PY_CACHE_KEY::$(python -c 'import hashlib, sys;print(hashlib.sha256(sys.version.encode()+sys.executable.encode()).hexdigest())')"
    - name: Cache .tox
      uses: actions/cache@v1
      with:
        path: ${{ github.workspace }}/.tox/${{ matrix.tox_env }}
        key: tox|${{ matrix.tox_env }}|${{ env.PY_CACHE_KEY }}|${{ hashFiles('tox.ini') }}|${{ hashFiles('setup.*') }}
    - name: Cache .pre-commit
      if: (matrix.tox_env == 'linting_ci')
      uses: actions/cache@v1
      with:
        path: ~/.cache/pre-commit
        key: pre-commit|${{ env.PY_CACHE_KEY }}|${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Install tox / version information
      env:
        PIP_DISABLE_PIP_VERSION_CHECK: "1"
      run: |
        python -m pip --version
        python -m pip install git+https://github.com/blueyed/tox@master
        python -m pip list

    - name: Setup tox environment
      run: python -m tox --notest -v --durations -e ${{ matrix.tox_env }}

    - name: Test
      env:
        PYTEST_ADDOPTS: "-ra --durations=50 ${{ matrix.pytest_addopts }}"
        COLUMNS: "120"
      run: "${{ matrix.script_prefix }} tox -e ${{ matrix.tox_env }}"

    - name: Prepare coverage token
      if: (contains(matrix.tox_env, '-coverage') && ( github.repository == 'blueyed/pytest' || github.event_name == 'pull_request' ))
      run: |
        python scripts/append_codecov_token.py

    - name: Report coverage
      if: (contains(matrix.tox_env, '-coverage'))
      env:
        CODECOV_NAME: ${{ matrix.name }}
      run: bash scripts/report-coverage.sh -F GHA,${{ runner.os }}

  deploy:
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') && github.repository == 'pytest-dev/pytest'
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: "3.7"
    - name: Install dependencies
      run: |
        python -m pip --version
        python -m pip install wheel setuptools git+https://github.com/blueyed/tox@master
    - name: Build package
      run: |
        python setup.py sdist bdist_wheel
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.pypi_token }}
    - name: Publish GitHub release notes
      env:
        GH_RELEASE_NOTES_TOKEN: ${{ secrets.release_notes }}
      run: |
        sudo apt-get install pandoc
        tox -e publish-gh-release-notes
